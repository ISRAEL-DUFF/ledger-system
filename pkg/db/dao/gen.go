// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"
	"database/sql"

	"gorm.io/gorm"

	"gorm.io/gen"

	"gorm.io/plugin/dbresolver"
)

func Use(db *gorm.DB, opts ...gen.DOOption) *Query {
	return &Query{
		db:                db,
		AccountBlock:      newAccountBlock(db, opts...),
		BlockMetum:        newBlockMetum(db, opts...),
		ChartOfAccount:    newChartOfAccount(db, opts...),
		GooseDbVersion:    newGooseDbVersion(db, opts...),
		JournalEntry:      newJournalEntry(db, opts...),
		LedgerAccount:     newLedgerAccount(db, opts...),
		LedgerTransaction: newLedgerTransaction(db, opts...),
		User:              newUser(db, opts...),
	}
}

type Query struct {
	db *gorm.DB

	AccountBlock      accountBlock
	BlockMetum        blockMetum
	ChartOfAccount    chartOfAccount
	GooseDbVersion    gooseDbVersion
	JournalEntry      journalEntry
	LedgerAccount     ledgerAccount
	LedgerTransaction ledgerTransaction
	User              user
}

func (q *Query) Available() bool { return q.db != nil }

func (q *Query) clone(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		AccountBlock:      q.AccountBlock.clone(db),
		BlockMetum:        q.BlockMetum.clone(db),
		ChartOfAccount:    q.ChartOfAccount.clone(db),
		GooseDbVersion:    q.GooseDbVersion.clone(db),
		JournalEntry:      q.JournalEntry.clone(db),
		LedgerAccount:     q.LedgerAccount.clone(db),
		LedgerTransaction: q.LedgerTransaction.clone(db),
		User:              q.User.clone(db),
	}
}

func (q *Query) ReadDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Read))
}

func (q *Query) WriteDB() *Query {
	return q.ReplaceDB(q.db.Clauses(dbresolver.Write))
}

func (q *Query) ReplaceDB(db *gorm.DB) *Query {
	return &Query{
		db:                db,
		AccountBlock:      q.AccountBlock.replaceDB(db),
		BlockMetum:        q.BlockMetum.replaceDB(db),
		ChartOfAccount:    q.ChartOfAccount.replaceDB(db),
		GooseDbVersion:    q.GooseDbVersion.replaceDB(db),
		JournalEntry:      q.JournalEntry.replaceDB(db),
		LedgerAccount:     q.LedgerAccount.replaceDB(db),
		LedgerTransaction: q.LedgerTransaction.replaceDB(db),
		User:              q.User.replaceDB(db),
	}
}

type queryCtx struct {
	AccountBlock      *accountBlockDo
	BlockMetum        *blockMetumDo
	ChartOfAccount    *chartOfAccountDo
	GooseDbVersion    *gooseDbVersionDo
	JournalEntry      *journalEntryDo
	LedgerAccount     *ledgerAccountDo
	LedgerTransaction *ledgerTransactionDo
	User              *userDo
}

func (q *Query) WithContext(ctx context.Context) *queryCtx {
	return &queryCtx{
		AccountBlock:      q.AccountBlock.WithContext(ctx),
		BlockMetum:        q.BlockMetum.WithContext(ctx),
		ChartOfAccount:    q.ChartOfAccount.WithContext(ctx),
		GooseDbVersion:    q.GooseDbVersion.WithContext(ctx),
		JournalEntry:      q.JournalEntry.WithContext(ctx),
		LedgerAccount:     q.LedgerAccount.WithContext(ctx),
		LedgerTransaction: q.LedgerTransaction.WithContext(ctx),
		User:              q.User.WithContext(ctx),
	}
}

func (q *Query) Transaction(fc func(tx *Query) error, opts ...*sql.TxOptions) error {
	return q.db.Transaction(func(tx *gorm.DB) error { return fc(q.clone(tx)) }, opts...)
}

func (q *Query) Begin(opts ...*sql.TxOptions) *QueryTx {
	tx := q.db.Begin(opts...)
	return &QueryTx{Query: q.clone(tx), Error: tx.Error}
}

type QueryTx struct {
	*Query
	Error error
}

func (q *QueryTx) Commit() error {
	return q.db.Commit().Error
}

func (q *QueryTx) Rollback() error {
	return q.db.Rollback().Error
}

func (q *QueryTx) SavePoint(name string) error {
	return q.db.SavePoint(name).Error
}

func (q *QueryTx) RollbackTo(name string) error {
	return q.db.RollbackTo(name).Error
}
