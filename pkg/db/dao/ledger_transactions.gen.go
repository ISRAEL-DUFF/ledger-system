// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/israel-duff/ledger-system/pkg/db/model"
)

func newLedgerTransaction(db *gorm.DB, opts ...gen.DOOption) ledgerTransaction {
	_ledgerTransaction := ledgerTransaction{}

	_ledgerTransaction.ledgerTransactionDo.UseDB(db, opts...)
	_ledgerTransaction.ledgerTransactionDo.UseModel(&model.LedgerTransaction{})

	tableName := _ledgerTransaction.ledgerTransactionDo.TableName()
	_ledgerTransaction.ALL = field.NewAsterisk(tableName)
	_ledgerTransaction.ID = field.NewString(tableName, "id")
	_ledgerTransaction.CreatedAt = field.NewTime(tableName, "created_at")
	_ledgerTransaction.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ledgerTransaction.DeletedAt = field.NewField(tableName, "deleted_at")
	_ledgerTransaction.Description = field.NewString(tableName, "description")
	_ledgerTransaction.Status = field.NewString(tableName, "status")

	_ledgerTransaction.fillFieldMap()

	return _ledgerTransaction
}

type ledgerTransaction struct {
	ledgerTransactionDo ledgerTransactionDo

	ALL         field.Asterisk
	ID          field.String
	CreatedAt   field.Time
	UpdatedAt   field.Time
	DeletedAt   field.Field
	Description field.String
	Status      field.String

	fieldMap map[string]field.Expr
}

func (l ledgerTransaction) Table(newTableName string) *ledgerTransaction {
	l.ledgerTransactionDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l ledgerTransaction) As(alias string) *ledgerTransaction {
	l.ledgerTransactionDo.DO = *(l.ledgerTransactionDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *ledgerTransaction) updateTableName(table string) *ledgerTransaction {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.Description = field.NewString(table, "description")
	l.Status = field.NewString(table, "status")

	l.fillFieldMap()

	return l
}

func (l *ledgerTransaction) WithContext(ctx context.Context) *ledgerTransactionDo {
	return l.ledgerTransactionDo.WithContext(ctx)
}

func (l ledgerTransaction) TableName() string { return l.ledgerTransactionDo.TableName() }

func (l ledgerTransaction) Alias() string { return l.ledgerTransactionDo.Alias() }

func (l ledgerTransaction) Columns(cols ...field.Expr) gen.Columns {
	return l.ledgerTransactionDo.Columns(cols...)
}

func (l *ledgerTransaction) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *ledgerTransaction) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 6)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["description"] = l.Description
	l.fieldMap["status"] = l.Status
}

func (l ledgerTransaction) clone(db *gorm.DB) ledgerTransaction {
	l.ledgerTransactionDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l ledgerTransaction) replaceDB(db *gorm.DB) ledgerTransaction {
	l.ledgerTransactionDo.ReplaceDB(db)
	return l
}

type ledgerTransactionDo struct{ gen.DO }

func (l ledgerTransactionDo) Debug() *ledgerTransactionDo {
	return l.withDO(l.DO.Debug())
}

func (l ledgerTransactionDo) WithContext(ctx context.Context) *ledgerTransactionDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l ledgerTransactionDo) ReadDB() *ledgerTransactionDo {
	return l.Clauses(dbresolver.Read)
}

func (l ledgerTransactionDo) WriteDB() *ledgerTransactionDo {
	return l.Clauses(dbresolver.Write)
}

func (l ledgerTransactionDo) Session(config *gorm.Session) *ledgerTransactionDo {
	return l.withDO(l.DO.Session(config))
}

func (l ledgerTransactionDo) Clauses(conds ...clause.Expression) *ledgerTransactionDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l ledgerTransactionDo) Returning(value interface{}, columns ...string) *ledgerTransactionDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l ledgerTransactionDo) Not(conds ...gen.Condition) *ledgerTransactionDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l ledgerTransactionDo) Or(conds ...gen.Condition) *ledgerTransactionDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l ledgerTransactionDo) Select(conds ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l ledgerTransactionDo) Where(conds ...gen.Condition) *ledgerTransactionDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l ledgerTransactionDo) Order(conds ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l ledgerTransactionDo) Distinct(cols ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l ledgerTransactionDo) Omit(cols ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l ledgerTransactionDo) Join(table schema.Tabler, on ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l ledgerTransactionDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l ledgerTransactionDo) RightJoin(table schema.Tabler, on ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l ledgerTransactionDo) Group(cols ...field.Expr) *ledgerTransactionDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l ledgerTransactionDo) Having(conds ...gen.Condition) *ledgerTransactionDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l ledgerTransactionDo) Limit(limit int) *ledgerTransactionDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l ledgerTransactionDo) Offset(offset int) *ledgerTransactionDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l ledgerTransactionDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ledgerTransactionDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l ledgerTransactionDo) Unscoped() *ledgerTransactionDo {
	return l.withDO(l.DO.Unscoped())
}

func (l ledgerTransactionDo) Create(values ...*model.LedgerTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l ledgerTransactionDo) CreateInBatches(values []*model.LedgerTransaction, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l ledgerTransactionDo) Save(values ...*model.LedgerTransaction) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l ledgerTransactionDo) First() (*model.LedgerTransaction, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransaction), nil
	}
}

func (l ledgerTransactionDo) Take() (*model.LedgerTransaction, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransaction), nil
	}
}

func (l ledgerTransactionDo) Last() (*model.LedgerTransaction, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransaction), nil
	}
}

func (l ledgerTransactionDo) Find() ([]*model.LedgerTransaction, error) {
	result, err := l.DO.Find()
	return result.([]*model.LedgerTransaction), err
}

func (l ledgerTransactionDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LedgerTransaction, err error) {
	buf := make([]*model.LedgerTransaction, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l ledgerTransactionDo) FindInBatches(result *[]*model.LedgerTransaction, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l ledgerTransactionDo) Attrs(attrs ...field.AssignExpr) *ledgerTransactionDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l ledgerTransactionDo) Assign(attrs ...field.AssignExpr) *ledgerTransactionDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l ledgerTransactionDo) Joins(fields ...field.RelationField) *ledgerTransactionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l ledgerTransactionDo) Preload(fields ...field.RelationField) *ledgerTransactionDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l ledgerTransactionDo) FirstOrInit() (*model.LedgerTransaction, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransaction), nil
	}
}

func (l ledgerTransactionDo) FirstOrCreate() (*model.LedgerTransaction, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerTransaction), nil
	}
}

func (l ledgerTransactionDo) FindByPage(offset int, limit int) (result []*model.LedgerTransaction, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l ledgerTransactionDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l ledgerTransactionDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l ledgerTransactionDo) Delete(models ...*model.LedgerTransaction) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *ledgerTransactionDo) withDO(do gen.Dao) *ledgerTransactionDo {
	l.DO = *do.(*gen.DO)
	return l
}
