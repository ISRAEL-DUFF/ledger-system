// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/israel-duff/ledger-system/pkg/db/model"
)

func newLedgerAccount(db *gorm.DB, opts ...gen.DOOption) ledgerAccount {
	_ledgerAccount := ledgerAccount{}

	_ledgerAccount.ledgerAccountDo.UseDB(db, opts...)
	_ledgerAccount.ledgerAccountDo.UseModel(&model.LedgerAccount{})

	tableName := _ledgerAccount.ledgerAccountDo.TableName()
	_ledgerAccount.ALL = field.NewAsterisk(tableName)
	_ledgerAccount.ID = field.NewString(tableName, "id")
	_ledgerAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_ledgerAccount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_ledgerAccount.DeletedAt = field.NewField(tableName, "deleted_at")
	_ledgerAccount.AccountNumber = field.NewString(tableName, "account_number")
	_ledgerAccount.Status = field.NewString(tableName, "status")
	_ledgerAccount.Book = field.NewString(tableName, "book")
	_ledgerAccount.Particular = field.NewString(tableName, "particular")
	_ledgerAccount.OwnerID = field.NewString(tableName, "owner_id")
	_ledgerAccount.Label = field.NewString(tableName, "label")
	_ledgerAccount.CurrentActiveBlockID = field.NewString(tableName, "current_active_block_id")
	_ledgerAccount.BlockCount = field.NewInt32(tableName, "block_count")

	_ledgerAccount.fillFieldMap()

	return _ledgerAccount
}

type ledgerAccount struct {
	ledgerAccountDo ledgerAccountDo

	ALL                  field.Asterisk
	ID                   field.String
	CreatedAt            field.Time
	UpdatedAt            field.Time
	DeletedAt            field.Field
	AccountNumber        field.String
	Status               field.String
	Book                 field.String
	Particular           field.String
	OwnerID              field.String
	Label                field.String
	CurrentActiveBlockID field.String
	BlockCount           field.Int32

	fieldMap map[string]field.Expr
}

func (l ledgerAccount) Table(newTableName string) *ledgerAccount {
	l.ledgerAccountDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l ledgerAccount) As(alias string) *ledgerAccount {
	l.ledgerAccountDo.DO = *(l.ledgerAccountDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *ledgerAccount) updateTableName(table string) *ledgerAccount {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewString(table, "id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")
	l.DeletedAt = field.NewField(table, "deleted_at")
	l.AccountNumber = field.NewString(table, "account_number")
	l.Status = field.NewString(table, "status")
	l.Book = field.NewString(table, "book")
	l.Particular = field.NewString(table, "particular")
	l.OwnerID = field.NewString(table, "owner_id")
	l.Label = field.NewString(table, "label")
	l.CurrentActiveBlockID = field.NewString(table, "current_active_block_id")
	l.BlockCount = field.NewInt32(table, "block_count")

	l.fillFieldMap()

	return l
}

func (l *ledgerAccount) WithContext(ctx context.Context) *ledgerAccountDo {
	return l.ledgerAccountDo.WithContext(ctx)
}

func (l ledgerAccount) TableName() string { return l.ledgerAccountDo.TableName() }

func (l ledgerAccount) Alias() string { return l.ledgerAccountDo.Alias() }

func (l ledgerAccount) Columns(cols ...field.Expr) gen.Columns {
	return l.ledgerAccountDo.Columns(cols...)
}

func (l *ledgerAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *ledgerAccount) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 12)
	l.fieldMap["id"] = l.ID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt
	l.fieldMap["deleted_at"] = l.DeletedAt
	l.fieldMap["account_number"] = l.AccountNumber
	l.fieldMap["status"] = l.Status
	l.fieldMap["book"] = l.Book
	l.fieldMap["particular"] = l.Particular
	l.fieldMap["owner_id"] = l.OwnerID
	l.fieldMap["label"] = l.Label
	l.fieldMap["current_active_block_id"] = l.CurrentActiveBlockID
	l.fieldMap["block_count"] = l.BlockCount
}

func (l ledgerAccount) clone(db *gorm.DB) ledgerAccount {
	l.ledgerAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l ledgerAccount) replaceDB(db *gorm.DB) ledgerAccount {
	l.ledgerAccountDo.ReplaceDB(db)
	return l
}

type ledgerAccountDo struct{ gen.DO }

func (l ledgerAccountDo) Debug() *ledgerAccountDo {
	return l.withDO(l.DO.Debug())
}

func (l ledgerAccountDo) WithContext(ctx context.Context) *ledgerAccountDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l ledgerAccountDo) ReadDB() *ledgerAccountDo {
	return l.Clauses(dbresolver.Read)
}

func (l ledgerAccountDo) WriteDB() *ledgerAccountDo {
	return l.Clauses(dbresolver.Write)
}

func (l ledgerAccountDo) Session(config *gorm.Session) *ledgerAccountDo {
	return l.withDO(l.DO.Session(config))
}

func (l ledgerAccountDo) Clauses(conds ...clause.Expression) *ledgerAccountDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l ledgerAccountDo) Returning(value interface{}, columns ...string) *ledgerAccountDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l ledgerAccountDo) Not(conds ...gen.Condition) *ledgerAccountDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l ledgerAccountDo) Or(conds ...gen.Condition) *ledgerAccountDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l ledgerAccountDo) Select(conds ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l ledgerAccountDo) Where(conds ...gen.Condition) *ledgerAccountDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l ledgerAccountDo) Order(conds ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l ledgerAccountDo) Distinct(cols ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l ledgerAccountDo) Omit(cols ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l ledgerAccountDo) Join(table schema.Tabler, on ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l ledgerAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l ledgerAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l ledgerAccountDo) Group(cols ...field.Expr) *ledgerAccountDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l ledgerAccountDo) Having(conds ...gen.Condition) *ledgerAccountDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l ledgerAccountDo) Limit(limit int) *ledgerAccountDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l ledgerAccountDo) Offset(offset int) *ledgerAccountDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l ledgerAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *ledgerAccountDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l ledgerAccountDo) Unscoped() *ledgerAccountDo {
	return l.withDO(l.DO.Unscoped())
}

func (l ledgerAccountDo) Create(values ...*model.LedgerAccount) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l ledgerAccountDo) CreateInBatches(values []*model.LedgerAccount, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l ledgerAccountDo) Save(values ...*model.LedgerAccount) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l ledgerAccountDo) First() (*model.LedgerAccount, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerAccount), nil
	}
}

func (l ledgerAccountDo) Take() (*model.LedgerAccount, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerAccount), nil
	}
}

func (l ledgerAccountDo) Last() (*model.LedgerAccount, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerAccount), nil
	}
}

func (l ledgerAccountDo) Find() ([]*model.LedgerAccount, error) {
	result, err := l.DO.Find()
	return result.([]*model.LedgerAccount), err
}

func (l ledgerAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.LedgerAccount, err error) {
	buf := make([]*model.LedgerAccount, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l ledgerAccountDo) FindInBatches(result *[]*model.LedgerAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l ledgerAccountDo) Attrs(attrs ...field.AssignExpr) *ledgerAccountDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l ledgerAccountDo) Assign(attrs ...field.AssignExpr) *ledgerAccountDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l ledgerAccountDo) Joins(fields ...field.RelationField) *ledgerAccountDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l ledgerAccountDo) Preload(fields ...field.RelationField) *ledgerAccountDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l ledgerAccountDo) FirstOrInit() (*model.LedgerAccount, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerAccount), nil
	}
}

func (l ledgerAccountDo) FirstOrCreate() (*model.LedgerAccount, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.LedgerAccount), nil
	}
}

func (l ledgerAccountDo) FindByPage(offset int, limit int) (result []*model.LedgerAccount, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l ledgerAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l ledgerAccountDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l ledgerAccountDo) Delete(models ...*model.LedgerAccount) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *ledgerAccountDo) withDO(do gen.Dao) *ledgerAccountDo {
	l.DO = *do.(*gen.DO)
	return l
}
