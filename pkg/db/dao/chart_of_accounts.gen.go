// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/israel-duff/ledger-system/pkg/db/model"
)

func newChartOfAccount(db *gorm.DB, opts ...gen.DOOption) chartOfAccount {
	_chartOfAccount := chartOfAccount{}

	_chartOfAccount.chartOfAccountDo.UseDB(db, opts...)
	_chartOfAccount.chartOfAccountDo.UseModel(&model.ChartOfAccount{})

	tableName := _chartOfAccount.chartOfAccountDo.TableName()
	_chartOfAccount.ALL = field.NewAsterisk(tableName)
	_chartOfAccount.ID = field.NewString(tableName, "id")
	_chartOfAccount.CreatedAt = field.NewTime(tableName, "created_at")
	_chartOfAccount.UpdatedAt = field.NewTime(tableName, "updated_at")
	_chartOfAccount.DeletedAt = field.NewField(tableName, "deleted_at")
	_chartOfAccount.Name = field.NewString(tableName, "name")
	_chartOfAccount.AccountNumber = field.NewString(tableName, "account_number")
	_chartOfAccount.Description = field.NewString(tableName, "description")
	_chartOfAccount.Type = field.NewString(tableName, "type")

	_chartOfAccount.fillFieldMap()

	return _chartOfAccount
}

type chartOfAccount struct {
	chartOfAccountDo chartOfAccountDo

	ALL           field.Asterisk
	ID            field.String
	CreatedAt     field.Time
	UpdatedAt     field.Time
	DeletedAt     field.Field
	Name          field.String
	AccountNumber field.String
	Description   field.String
	Type          field.String

	fieldMap map[string]field.Expr
}

func (c chartOfAccount) Table(newTableName string) *chartOfAccount {
	c.chartOfAccountDo.UseTable(newTableName)
	return c.updateTableName(newTableName)
}

func (c chartOfAccount) As(alias string) *chartOfAccount {
	c.chartOfAccountDo.DO = *(c.chartOfAccountDo.As(alias).(*gen.DO))
	return c.updateTableName(alias)
}

func (c *chartOfAccount) updateTableName(table string) *chartOfAccount {
	c.ALL = field.NewAsterisk(table)
	c.ID = field.NewString(table, "id")
	c.CreatedAt = field.NewTime(table, "created_at")
	c.UpdatedAt = field.NewTime(table, "updated_at")
	c.DeletedAt = field.NewField(table, "deleted_at")
	c.Name = field.NewString(table, "name")
	c.AccountNumber = field.NewString(table, "account_number")
	c.Description = field.NewString(table, "description")
	c.Type = field.NewString(table, "type")

	c.fillFieldMap()

	return c
}

func (c *chartOfAccount) WithContext(ctx context.Context) *chartOfAccountDo {
	return c.chartOfAccountDo.WithContext(ctx)
}

func (c chartOfAccount) TableName() string { return c.chartOfAccountDo.TableName() }

func (c chartOfAccount) Alias() string { return c.chartOfAccountDo.Alias() }

func (c *chartOfAccount) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := c.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (c *chartOfAccount) fillFieldMap() {
	c.fieldMap = make(map[string]field.Expr, 8)
	c.fieldMap["id"] = c.ID
	c.fieldMap["created_at"] = c.CreatedAt
	c.fieldMap["updated_at"] = c.UpdatedAt
	c.fieldMap["deleted_at"] = c.DeletedAt
	c.fieldMap["name"] = c.Name
	c.fieldMap["account_number"] = c.AccountNumber
	c.fieldMap["description"] = c.Description
	c.fieldMap["type"] = c.Type
}

func (c chartOfAccount) clone(db *gorm.DB) chartOfAccount {
	c.chartOfAccountDo.ReplaceConnPool(db.Statement.ConnPool)
	return c
}

func (c chartOfAccount) replaceDB(db *gorm.DB) chartOfAccount {
	c.chartOfAccountDo.ReplaceDB(db)
	return c
}

type chartOfAccountDo struct{ gen.DO }

func (c chartOfAccountDo) Debug() *chartOfAccountDo {
	return c.withDO(c.DO.Debug())
}

func (c chartOfAccountDo) WithContext(ctx context.Context) *chartOfAccountDo {
	return c.withDO(c.DO.WithContext(ctx))
}

func (c chartOfAccountDo) ReadDB() *chartOfAccountDo {
	return c.Clauses(dbresolver.Read)
}

func (c chartOfAccountDo) WriteDB() *chartOfAccountDo {
	return c.Clauses(dbresolver.Write)
}

func (c chartOfAccountDo) Session(config *gorm.Session) *chartOfAccountDo {
	return c.withDO(c.DO.Session(config))
}

func (c chartOfAccountDo) Clauses(conds ...clause.Expression) *chartOfAccountDo {
	return c.withDO(c.DO.Clauses(conds...))
}

func (c chartOfAccountDo) Returning(value interface{}, columns ...string) *chartOfAccountDo {
	return c.withDO(c.DO.Returning(value, columns...))
}

func (c chartOfAccountDo) Not(conds ...gen.Condition) *chartOfAccountDo {
	return c.withDO(c.DO.Not(conds...))
}

func (c chartOfAccountDo) Or(conds ...gen.Condition) *chartOfAccountDo {
	return c.withDO(c.DO.Or(conds...))
}

func (c chartOfAccountDo) Select(conds ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.Select(conds...))
}

func (c chartOfAccountDo) Where(conds ...gen.Condition) *chartOfAccountDo {
	return c.withDO(c.DO.Where(conds...))
}

func (c chartOfAccountDo) Exists(subquery interface{ UnderlyingDB() *gorm.DB }) *chartOfAccountDo {
	return c.Where(field.CompareSubQuery(field.ExistsOp, nil, subquery.UnderlyingDB()))
}

func (c chartOfAccountDo) Order(conds ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.Order(conds...))
}

func (c chartOfAccountDo) Distinct(cols ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.Distinct(cols...))
}

func (c chartOfAccountDo) Omit(cols ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.Omit(cols...))
}

func (c chartOfAccountDo) Join(table schema.Tabler, on ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.Join(table, on...))
}

func (c chartOfAccountDo) LeftJoin(table schema.Tabler, on ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.LeftJoin(table, on...))
}

func (c chartOfAccountDo) RightJoin(table schema.Tabler, on ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.RightJoin(table, on...))
}

func (c chartOfAccountDo) Group(cols ...field.Expr) *chartOfAccountDo {
	return c.withDO(c.DO.Group(cols...))
}

func (c chartOfAccountDo) Having(conds ...gen.Condition) *chartOfAccountDo {
	return c.withDO(c.DO.Having(conds...))
}

func (c chartOfAccountDo) Limit(limit int) *chartOfAccountDo {
	return c.withDO(c.DO.Limit(limit))
}

func (c chartOfAccountDo) Offset(offset int) *chartOfAccountDo {
	return c.withDO(c.DO.Offset(offset))
}

func (c chartOfAccountDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *chartOfAccountDo {
	return c.withDO(c.DO.Scopes(funcs...))
}

func (c chartOfAccountDo) Unscoped() *chartOfAccountDo {
	return c.withDO(c.DO.Unscoped())
}

func (c chartOfAccountDo) Create(values ...*model.ChartOfAccount) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Create(values)
}

func (c chartOfAccountDo) CreateInBatches(values []*model.ChartOfAccount, batchSize int) error {
	return c.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (c chartOfAccountDo) Save(values ...*model.ChartOfAccount) error {
	if len(values) == 0 {
		return nil
	}
	return c.DO.Save(values)
}

func (c chartOfAccountDo) First() (*model.ChartOfAccount, error) {
	if result, err := c.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartOfAccount), nil
	}
}

func (c chartOfAccountDo) Take() (*model.ChartOfAccount, error) {
	if result, err := c.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartOfAccount), nil
	}
}

func (c chartOfAccountDo) Last() (*model.ChartOfAccount, error) {
	if result, err := c.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartOfAccount), nil
	}
}

func (c chartOfAccountDo) Find() ([]*model.ChartOfAccount, error) {
	result, err := c.DO.Find()
	return result.([]*model.ChartOfAccount), err
}

func (c chartOfAccountDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.ChartOfAccount, err error) {
	buf := make([]*model.ChartOfAccount, 0, batchSize)
	err = c.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (c chartOfAccountDo) FindInBatches(result *[]*model.ChartOfAccount, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return c.DO.FindInBatches(result, batchSize, fc)
}

func (c chartOfAccountDo) Attrs(attrs ...field.AssignExpr) *chartOfAccountDo {
	return c.withDO(c.DO.Attrs(attrs...))
}

func (c chartOfAccountDo) Assign(attrs ...field.AssignExpr) *chartOfAccountDo {
	return c.withDO(c.DO.Assign(attrs...))
}

func (c chartOfAccountDo) Joins(fields ...field.RelationField) *chartOfAccountDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Joins(_f))
	}
	return &c
}

func (c chartOfAccountDo) Preload(fields ...field.RelationField) *chartOfAccountDo {
	for _, _f := range fields {
		c = *c.withDO(c.DO.Preload(_f))
	}
	return &c
}

func (c chartOfAccountDo) FirstOrInit() (*model.ChartOfAccount, error) {
	if result, err := c.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartOfAccount), nil
	}
}

func (c chartOfAccountDo) FirstOrCreate() (*model.ChartOfAccount, error) {
	if result, err := c.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.ChartOfAccount), nil
	}
}

func (c chartOfAccountDo) FindByPage(offset int, limit int) (result []*model.ChartOfAccount, count int64, err error) {
	result, err = c.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = c.Offset(-1).Limit(-1).Count()
	return
}

func (c chartOfAccountDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = c.Count()
	if err != nil {
		return
	}

	err = c.Offset(offset).Limit(limit).Scan(result)
	return
}

func (c chartOfAccountDo) Scan(result interface{}) (err error) {
	return c.DO.Scan(result)
}

func (c chartOfAccountDo) Delete(models ...*model.ChartOfAccount) (result gen.ResultInfo, err error) {
	return c.DO.Delete(models)
}

func (c *chartOfAccountDo) withDO(do gen.Dao) *chartOfAccountDo {
	c.DO = *do.(*gen.DO)
	return c
}
