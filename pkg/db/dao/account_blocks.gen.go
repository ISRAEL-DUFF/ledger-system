// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package dao

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/israel-duff/ledger-system/pkg/db/model"
)

func newAccountBlock(db *gorm.DB, opts ...gen.DOOption) accountBlock {
	_accountBlock := accountBlock{}

	_accountBlock.accountBlockDo.UseDB(db, opts...)
	_accountBlock.accountBlockDo.UseModel(&model.AccountBlock{})

	tableName := _accountBlock.accountBlockDo.TableName()
	_accountBlock.ALL = field.NewAsterisk(tableName)
	_accountBlock.ID = field.NewString(tableName, "id")
	_accountBlock.CreatedAt = field.NewTime(tableName, "created_at")
	_accountBlock.UpdatedAt = field.NewTime(tableName, "updated_at")
	_accountBlock.DeletedAt = field.NewField(tableName, "deleted_at")
	_accountBlock.AccountID = field.NewString(tableName, "account_id")
	_accountBlock.IsCurrentBlock = field.NewBool(tableName, "is_current_block")
	_accountBlock.BlockSize = field.NewInt32(tableName, "block_size")
	_accountBlock.TransactionsCount = field.NewInt32(tableName, "transactions_count")
	_accountBlock.Status = field.NewString(tableName, "status")

	_accountBlock.fillFieldMap()

	return _accountBlock
}

type accountBlock struct {
	accountBlockDo accountBlockDo

	ALL               field.Asterisk
	ID                field.String
	CreatedAt         field.Time
	UpdatedAt         field.Time
	DeletedAt         field.Field
	AccountID         field.String
	IsCurrentBlock    field.Bool
	BlockSize         field.Int32
	TransactionsCount field.Int32
	Status            field.String

	fieldMap map[string]field.Expr
}

func (a accountBlock) Table(newTableName string) *accountBlock {
	a.accountBlockDo.UseTable(newTableName)
	return a.updateTableName(newTableName)
}

func (a accountBlock) As(alias string) *accountBlock {
	a.accountBlockDo.DO = *(a.accountBlockDo.As(alias).(*gen.DO))
	return a.updateTableName(alias)
}

func (a *accountBlock) updateTableName(table string) *accountBlock {
	a.ALL = field.NewAsterisk(table)
	a.ID = field.NewString(table, "id")
	a.CreatedAt = field.NewTime(table, "created_at")
	a.UpdatedAt = field.NewTime(table, "updated_at")
	a.DeletedAt = field.NewField(table, "deleted_at")
	a.AccountID = field.NewString(table, "account_id")
	a.IsCurrentBlock = field.NewBool(table, "is_current_block")
	a.BlockSize = field.NewInt32(table, "block_size")
	a.TransactionsCount = field.NewInt32(table, "transactions_count")
	a.Status = field.NewString(table, "status")

	a.fillFieldMap()

	return a
}

func (a *accountBlock) WithContext(ctx context.Context) *accountBlockDo {
	return a.accountBlockDo.WithContext(ctx)
}

func (a accountBlock) TableName() string { return a.accountBlockDo.TableName() }

func (a accountBlock) Alias() string { return a.accountBlockDo.Alias() }

func (a accountBlock) Columns(cols ...field.Expr) gen.Columns {
	return a.accountBlockDo.Columns(cols...)
}

func (a *accountBlock) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := a.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (a *accountBlock) fillFieldMap() {
	a.fieldMap = make(map[string]field.Expr, 9)
	a.fieldMap["id"] = a.ID
	a.fieldMap["created_at"] = a.CreatedAt
	a.fieldMap["updated_at"] = a.UpdatedAt
	a.fieldMap["deleted_at"] = a.DeletedAt
	a.fieldMap["account_id"] = a.AccountID
	a.fieldMap["is_current_block"] = a.IsCurrentBlock
	a.fieldMap["block_size"] = a.BlockSize
	a.fieldMap["transactions_count"] = a.TransactionsCount
	a.fieldMap["status"] = a.Status
}

func (a accountBlock) clone(db *gorm.DB) accountBlock {
	a.accountBlockDo.ReplaceConnPool(db.Statement.ConnPool)
	return a
}

func (a accountBlock) replaceDB(db *gorm.DB) accountBlock {
	a.accountBlockDo.ReplaceDB(db)
	return a
}

type accountBlockDo struct{ gen.DO }

func (a accountBlockDo) Debug() *accountBlockDo {
	return a.withDO(a.DO.Debug())
}

func (a accountBlockDo) WithContext(ctx context.Context) *accountBlockDo {
	return a.withDO(a.DO.WithContext(ctx))
}

func (a accountBlockDo) ReadDB() *accountBlockDo {
	return a.Clauses(dbresolver.Read)
}

func (a accountBlockDo) WriteDB() *accountBlockDo {
	return a.Clauses(dbresolver.Write)
}

func (a accountBlockDo) Session(config *gorm.Session) *accountBlockDo {
	return a.withDO(a.DO.Session(config))
}

func (a accountBlockDo) Clauses(conds ...clause.Expression) *accountBlockDo {
	return a.withDO(a.DO.Clauses(conds...))
}

func (a accountBlockDo) Returning(value interface{}, columns ...string) *accountBlockDo {
	return a.withDO(a.DO.Returning(value, columns...))
}

func (a accountBlockDo) Not(conds ...gen.Condition) *accountBlockDo {
	return a.withDO(a.DO.Not(conds...))
}

func (a accountBlockDo) Or(conds ...gen.Condition) *accountBlockDo {
	return a.withDO(a.DO.Or(conds...))
}

func (a accountBlockDo) Select(conds ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.Select(conds...))
}

func (a accountBlockDo) Where(conds ...gen.Condition) *accountBlockDo {
	return a.withDO(a.DO.Where(conds...))
}

func (a accountBlockDo) Order(conds ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.Order(conds...))
}

func (a accountBlockDo) Distinct(cols ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.Distinct(cols...))
}

func (a accountBlockDo) Omit(cols ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.Omit(cols...))
}

func (a accountBlockDo) Join(table schema.Tabler, on ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.Join(table, on...))
}

func (a accountBlockDo) LeftJoin(table schema.Tabler, on ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.LeftJoin(table, on...))
}

func (a accountBlockDo) RightJoin(table schema.Tabler, on ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.RightJoin(table, on...))
}

func (a accountBlockDo) Group(cols ...field.Expr) *accountBlockDo {
	return a.withDO(a.DO.Group(cols...))
}

func (a accountBlockDo) Having(conds ...gen.Condition) *accountBlockDo {
	return a.withDO(a.DO.Having(conds...))
}

func (a accountBlockDo) Limit(limit int) *accountBlockDo {
	return a.withDO(a.DO.Limit(limit))
}

func (a accountBlockDo) Offset(offset int) *accountBlockDo {
	return a.withDO(a.DO.Offset(offset))
}

func (a accountBlockDo) Scopes(funcs ...func(gen.Dao) gen.Dao) *accountBlockDo {
	return a.withDO(a.DO.Scopes(funcs...))
}

func (a accountBlockDo) Unscoped() *accountBlockDo {
	return a.withDO(a.DO.Unscoped())
}

func (a accountBlockDo) Create(values ...*model.AccountBlock) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Create(values)
}

func (a accountBlockDo) CreateInBatches(values []*model.AccountBlock, batchSize int) error {
	return a.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (a accountBlockDo) Save(values ...*model.AccountBlock) error {
	if len(values) == 0 {
		return nil
	}
	return a.DO.Save(values)
}

func (a accountBlockDo) First() (*model.AccountBlock, error) {
	if result, err := a.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountBlock), nil
	}
}

func (a accountBlockDo) Take() (*model.AccountBlock, error) {
	if result, err := a.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountBlock), nil
	}
}

func (a accountBlockDo) Last() (*model.AccountBlock, error) {
	if result, err := a.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountBlock), nil
	}
}

func (a accountBlockDo) Find() ([]*model.AccountBlock, error) {
	result, err := a.DO.Find()
	return result.([]*model.AccountBlock), err
}

func (a accountBlockDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.AccountBlock, err error) {
	buf := make([]*model.AccountBlock, 0, batchSize)
	err = a.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (a accountBlockDo) FindInBatches(result *[]*model.AccountBlock, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return a.DO.FindInBatches(result, batchSize, fc)
}

func (a accountBlockDo) Attrs(attrs ...field.AssignExpr) *accountBlockDo {
	return a.withDO(a.DO.Attrs(attrs...))
}

func (a accountBlockDo) Assign(attrs ...field.AssignExpr) *accountBlockDo {
	return a.withDO(a.DO.Assign(attrs...))
}

func (a accountBlockDo) Joins(fields ...field.RelationField) *accountBlockDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Joins(_f))
	}
	return &a
}

func (a accountBlockDo) Preload(fields ...field.RelationField) *accountBlockDo {
	for _, _f := range fields {
		a = *a.withDO(a.DO.Preload(_f))
	}
	return &a
}

func (a accountBlockDo) FirstOrInit() (*model.AccountBlock, error) {
	if result, err := a.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountBlock), nil
	}
}

func (a accountBlockDo) FirstOrCreate() (*model.AccountBlock, error) {
	if result, err := a.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.AccountBlock), nil
	}
}

func (a accountBlockDo) FindByPage(offset int, limit int) (result []*model.AccountBlock, count int64, err error) {
	result, err = a.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = a.Offset(-1).Limit(-1).Count()
	return
}

func (a accountBlockDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = a.Count()
	if err != nil {
		return
	}

	err = a.Offset(offset).Limit(limit).Scan(result)
	return
}

func (a accountBlockDo) Scan(result interface{}) (err error) {
	return a.DO.Scan(result)
}

func (a accountBlockDo) Delete(models ...*model.AccountBlock) (result gen.ResultInfo, err error) {
	return a.DO.Delete(models)
}

func (a *accountBlockDo) withDO(do gen.Dao) *accountBlockDo {
	a.DO = *do.(*gen.DO)
	return a
}
